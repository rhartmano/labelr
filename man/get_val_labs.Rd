% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_val_labs.R
\name{get_val_labs}
\alias{get_val_labs}
\title{Return Lookup Table of Variable Values and Value Labels}
\usage{
get_val_labs(data, var = NULL)
}
\arguments{
\item{data}{a data.frame.}

\item{var}{a character vector with the name(s) of any specific variable(s)
(If NULL, returned data.frame will contain all variable value labels).}
}
\value{
A three-column data.frame, consisting of "var", "vals", and "labs"
columns, where each row corresponds to a unique value of a value-labeled
variable (column) from the user-supplied data.frame (or, for value-labeled
numerical variables, the upper bound of numerical values that fall within a
given value label). Note that all "vals" of "vals" column are typically
expressed as character even if the underlying values are, e.g., integer,
because the "vals" column typically includes values from multiple input
data.frame variables, which may be of various classes, such as integer,
character, factor. Accordingly, the \code{get_val_labs}-returned data.frame is
intended to facilitate --visual-- inspection of what (if any) value label
have been attached to each variable value; it is --not-- intended to be used
for accurate interrogation of the underlying classes or types of variables in
the primary data.frame that you passed to it. For that, use, e.g.,
sapply(data, class), sapply(use_val_labs(data), class), etc. on that primary
data.frame.
}
\description{
For a variable-value-labeled data.frame, \code{get_val_labs} returns a derivative
data.frame that features the variable name, value, and associated value
labels for each value-labeled variable.

Note: \code{gvl} is a compact alias for \code{get_val_labs}: they do the same thing,
and the former is easier to type
}
\examples{
# add val labs to multiple variables at once
# make a "Likert"-type fake data set to demo
# note, by default, add_val_labs() "vars" arg will do partial matching
# in this case, we catch all vars with "x" in their name
dflik <- make_likert_data(scale = 1:7, seed = 272)
vals2label <- 1:7
labs2use <- c(
  "VSD",
  "SD",
  "D",
  "N",
  "A",
  "SA",
  "VSA"
)

dflik <- add_val_labs(
  data = dflik, vars = c("x", "y3"), # note the vars args
  vals = vals2label,
  labs = labs2use,
  partial = TRUE
)

# note, all "x" vars get the labs, as does "y3"
get_val_labs(dflik)
get_val_labs(dflik, "x1")
}
