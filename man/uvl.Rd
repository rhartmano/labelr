% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uvl.R
\name{uvl}
\alias{uvl}
\title{(Alias for) \code{use_val_labs()}}
\usage{
uvl(data, vars = NULL)
}
\arguments{
\item{data}{a data.frame.}

\item{vars}{the names of the columns (variables) for which labels-on
versions of the variable will replace the original variable in the returned
data.frame.}
}
\value{
A data.frame, with (all or the select) variable value labels "turned
on" (i.e., substituted for original variable values), and any affected
variables coerced to character if they were not already.
}
\description{
Replace the actual values of data.frame variables with the corresponding
value labels (previous assigned using \code{add_val_labs} or \code{add_val1}).
}
\details{
\code{uvl} is an alias for \code{use_val_labs}. See the \code{use_val_labs} documentation
for further information.
}
\examples{
# Example #1 - mtcars example, one variable at a time
# one variable at a time, mtcars
df <- mtcars
# now, add value labels
df <- add_val_labs(
  data = df,
  vars = "am",
  vals = c(0, 1),
  labs = c("automatic", "manual")
)

df <- add_val_labs(
  data = df,
  vars = "carb",
  vals = c(1, 2, 3, 4, 6, 8),
  labs = c(
    "1-carb", "2-carbs",
    "3-carbs", "4-carbs",
    "6-carbs", "8-carbs"
  )
)

# var arg can be unquoted if using add_val1()
# note that this is not add_val_labs(); add_val1() has "var" (not "vars) arg
df <- add_val1(
  data = df,
  var = cyl, # note, "var," not "vars" arg
  vals = c(4, 6, 8),
  labs = c(
    "four-cyl",
    "six-cyl",
    "eight-cyl"
  )
)

df <- add_val_labs(
  data = df,
  vars = "gear",
  vals = c(3, 4),
  labs = c(
    "3-speed",
    "4-speed"
  )
)

# Oops, we forgot 5-speeds; let's finish the job.
df <- add_val_labs(
  data = df,
  vars = "gear",
  vals = 5,
  labs = "5-speed"
)

head(uvl(df), 3) # they're there

# Example #2 - (Fake) Likert Data
# add val labs to multiple variables at once
# make a "Likert"-type fake data set to demo
# note, by default, add_val_labs() "vars" arg will do partial matching
# in this case, we catch all vars with "x" in their name
dflik <- make_likert_data(scale = 1:7, seed = 272)
vals2label <- 1:7
labs2use <- c(
  "VSD",
  "SD",
  "D",
  "N",
  "A",
  "SA",
  "VSA"
)

dflik <- add_val_labs(
  data = dflik, vars = c("x", "y3"), # note the vars args
  vals = vals2label,
  labs = labs2use,
  partial = TRUE
)

# note, all "x" vars get the labs, as does "y3"
# see vars = args above
lik1 <- uvl(dflik)
head(lik1)
# keep a copy
dflik_conv <- uvl(dflik)
head(dflik_conv, 3)
}
